/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;

//added imports for the tensorflow stuff - Jim

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;

import java.util.List;

//end added imports for tensor flow stuff
import org.firstinspires.ftc.robotcontroller.external.samples.HardwarePushbot;

/**
 * This file illustrates the concept of driving a path based on time.
 * It uses the common Pushbot hardware class to define the drive on the robot.
 * The code is structured as a LinearOpMode
 *
 * The code assumes that you do NOT have encoders on the wheels,
 *   otherwise you would use: PushbotAutoDriveByEncoder;
 *
 *   The desired path in this example is:
 *   - Drive forward for 3 seconds
 *   - Spin right for 1.3 seconds
 *   - Drive Backwards for 1 Second
 *   - Stop and close the claw.
 *
 *  The code is written in a simple form with no optimizations.
 *  However, there are several ways that this type of sequence could be streamlined,
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="Pushbot: Auto Drive By Time", group="Pushbot")
//@Disabled
public class AutoDriveByTime_Linear_Tensorflow extends LinearOpMode {

    /* Declare OpMode members. */
    HardwarePushbotv1         robot   = new HardwarePushbotv1();   // Use a Pushbot's hardware
    private ElapsedTime     runtime = new ElapsedTime();


    static final double     FORWARD_SPEED = 0.6;
    static final double     TURN_SPEED    = 0.5;
//added stuff to set up tensorflow - Jim
private static final String TFOD_MODEL_ASSET = "RoverRuckus.tflite";
    private static final String LABEL_GOLD_MINERAL = "Gold Mineral";
    private static final String LABEL_SILVER_MINERAL = "Silver Mineral";
 double cubeposition=0;



    /*
     * IMPORTANT: You need to obtain your own license key to use Vuforia. The string below with which
     * 'parameters.vuforiaLicenseKey' is initialized is for illustration only, and will not function.
     * A Vuforia 'Development' license key, can be obtained free of charge from the Vuforia developer
     * web site at https://developer.vuforia.com/license-manager.
     *
     * Vuforia license keys are always 380 characters long, and look as if they contain mostly
     * random data. As an example, here is a example of a fragment of a valid key:
     *      ... yIgIzTqZ4mWjk9wd3cZO9T1axEqzuhxoGlfOOI2dRzKS4T0hQ8kT ...
     * Once you've obtained a license key, copy the string from the Vuforia web site
     * and paste it in to your code on the next line, between the double quotes.
     */
    private static final String VUFORIA_KEY = "AfXQA17/////AAAAmQDwVf4S70ZsrrhV0hrOb9FSpITQgjqdRfEWKJ4NRh4/4kIxPnIUuX7xax23CDEMegWuzDObt4uecjivnxAFzj9dfIO5BWEIzCPQamhONrX5wWBLXw3Fx9a3iCVhtd0gZLBzv1xLo91sHKq+TI3mzhVV8lqn4R+LIVD+ierVrYwdJjNM0NidhSFW9ArOA/735T8kDCYpwn1T37DNsEOmHzBEoWdm/F0Gw4ycj97k8o4NOIFiq2smg2KfJPB81h8P2vvc+8PcbCm1IQQkBTmIrTeTNmrPhVGTTTzfuDIM/wlKT+f5Zg0bITdymjPJM46D3pFW6KYSPewDfh85wTrS29geo5hBxHCFjORgNaqBTQpE";

    /**
     * {@link #vuforia} is the variable we will use to store our instance of the Vuforia
     * localization engine.
     */
    private VuforiaLocalizer vuforia;

    /**
     * {@link #tfod} is the variable we will use to store our instance of the Tensor Flow Object
     * Detection engine.
     */
    private TFObjectDetector tfod;


//end  added stuff to set up for tensorflow    - Jim
    @Override
    public void runOpMode() {
//more added stuff for tensor flow -Jim

        // The TFObjectDetector uses the camera frames from the VuforiaLocalizer, so we create that
        // first.
        initVuforia();

        if (ClassFactory.getInstance().canCreateTFObjectDetector()) {
            initTfod();
        } else {
            telemetry.addData("Sorry!", "This device is not compatible with TFOD");
        }

        /** Wait for the game to begin */
        telemetry.addData(">", "Press Play to start tracking");
        telemetry.update();
        waitForStart();

        if (opModeIsActive()) {
            /** Activate Tensor Flow Object Detection. */
            if (tfod != null) {
                tfod.activate();
            }
            robot.init(hardwareMap);
            while (opModeIsActive() && (runtime.seconds() < 10.0)) {
                if (tfod != null) {
                    // getUpdatedRecognitions() will return null if no new information is available since
                    // the last time that call was made.
                    List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                    if (updatedRecognitions != null) {
                        telemetry.addData("# Object Detected", updatedRecognitions.size());
                        if (updatedRecognitions.size() == 3) {
                            int goldMineralX = -1;
                            int silverMineral1X = -1;
                            int silverMineral2X = -1;
                            for (Recognition recognition : updatedRecognitions) {
                                if (recognition.getLabel().equals(LABEL_GOLD_MINERAL)) {
                                    goldMineralX = (int) recognition.getLeft();
                                } else if (silverMineral1X == -1) {
                                    silverMineral1X = (int) recognition.getLeft();
                                } else {
                                    silverMineral2X = (int) recognition.getLeft();
                                }
                            }
                            if (goldMineralX != -1 && silverMineral1X != -1 && silverMineral2X != -1) {
                                if (goldMineralX < silverMineral1X && goldMineralX < silverMineral2X) {
                                    telemetry.addData("Gold Mineral Position as seen from 'bot", "Right");

                                   cubeposition =3;
                                    telemetry.addData("Gold Mineral Position number", cubeposition);
                                } else if (goldMineralX > silverMineral1X && goldMineralX > silverMineral2X) {
                                    telemetry.addData("Gold Mineral Position as seen from 'bot", "Left");

                                    cubeposition = 1;
                                    telemetry.addData("Gold Mineral Position number", cubeposition);
                                } else {

                                    telemetry.addData("Gold Mineral Position as seen from bot", "Center");
                                    cubeposition = 2;
                                    telemetry.addData("Gold Mineral Position number", cubeposition);


                                }
                            }
                        }
                        telemetry.update();
                    }
                }
            }
        }

        if (tfod != null) {
            tfod.shutdown();
        }
//end the more stuff added for tesnsor flow  - Jim
        /*
         * Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */

       // robot.init(hardwareMap);

             // Step through each leg of the path, ensuring that the Auto mode has not been stopped along the way
    if (cubeposition==1)
        runtime.reset();
        while (opModeIsActive() && (runtime.seconds() < 3.0)) {
            telemetry.addData("going left", "Running: %2.5f S Elapsed", runtime.seconds());
            telemetry.update();
            robot.steeringSevo.setPosition(0);
            robot.driveMotor.setPower(FORWARD_SPEED);
        }
        if (cubeposition==2)
            runtime.reset();
        while (opModeIsActive() && (runtime.seconds() < 3.0)) {
            telemetry.addData("going right", "Running: %2.5f S Elapsed", runtime.seconds());
            telemetry.update();
            robot.steeringSevo.setPosition(1);
            robot.driveMotor.setPower(FORWARD_SPEED);
        }
        if (cubeposition==3)
            runtime.reset();
        while (opModeIsActive() && (runtime.seconds() < 3.0)) {
            telemetry.addData("going center", "Running: %2.5f S Elapsed", runtime.seconds());
            telemetry.update();
            robot.steeringSevo.setPosition(.5);
            robot.driveMotor.setPower(FORWARD_SPEED);
        }

        // Step 1:  Drive forward for 3 seconds
        //robot.steeringSevo.setPosition(1.0);
        //robot.driveMotor.setPower(FORWARD_SPEED);

        //runtime.reset();
       // while (opModeIsActive() && (runtime.seconds() < 3.0)) {
           // telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
          //  telemetry.update();
        //}

        // Step 2:  Spin right for 1.3 seconds
       // robot.steeringSevo.setPosition(.5);
      //  robot.driveMotor.setPower(FORWARD_SPEED);

       // runtime.reset();
       // while (opModeIsActive() && (runtime.seconds() < 1.3)) {
        //    telemetry.addData("Path", "Leg 2: %2.5f S Elapsed", runtime.seconds());
        //    telemetry.update();
       // }


        // Step 4:  Stop and close the claw.

        robot.driveMotor.setPower(0.0);
        robot.steeringSevo.setPosition(.3);
        telemetry.addData("servo value" , robot.steeringSevo);
        telemetry.addData("Path", "Complete");
        telemetry.update();
        sleep(1000);
    }
    //last bit of added stuff for tensorflow-Jim

    /**
     * Initialize the Vuforia localization engine.
     */
    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);

        // Loading trackables is not necessary for the Tensor Flow Object Detection engine.
    }

    /**
     * Initialize the Tensor Flow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_GOLD_MINERAL, LABEL_SILVER_MINERAL);
    }
    //end of last little bit of tensorflow-Jim
}
